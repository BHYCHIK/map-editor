unit form;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, Spin, Menus, ExtCtrls, math, newfile;

type
  TMainForm = class(TForm)
    SettingsPanel: TGroupBox;
    seRadius: TSpinEdit;
    sePower: TSpinEdit;
    lblPower: TLabel;
    mmMenu: TMainMenu;
    mmFile: TMenuItem;
    mmSave: TMenuItem;
    mmOpen: TMenuItem;
    mmExit: TMenuItem;
    pbMap: TPaintBox;
    ScrollBox1: TScrollBox;
    lblGradient: TLabel;
    seGradient: TSpinEdit;
    mmNew: TMenuItem;
    odOpenMap: TOpenDialog;
    sdSaveRawFile: TSaveDialog;
    lblX: TLabel;
    lblRadius: TLabel;
    lblY: TLabel;
    lblZ: TLabel;
    procedure FormCreate(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure mmExitClick(Sender: TObject);
    procedure mmOpenClick(Sender: TObject);
    procedure pbMapPaint(Sender: TObject);
    procedure mmSaveClick(Sender: TObject);
    procedure mmNewClick(Sender: TObject);
    procedure pbMapMouseDown(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure pbMapMouseUp(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure pbMapMouseMove(Sender: TObject; Shift: TShiftState; X,
      Y: Integer);
  private
    isPainiting: Boolean;
    isModified: Boolean;
    map: TBitmap;
    procedure ExitProcedure();
    procedure Modify(X, Y: Integer);
  public
    { Public declarations }
  end;

var
  MainForm: TMainForm;

implementation

{$R *.dfm}

procedure TMainForm.ExitProcedure;
begin
  if isModified then
  begin
    mmSave.Click;
  end;
  map.Free;
  Application.Terminate;
end;

procedure TMainForm.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  ExitProcedure;
end;


procedure TMainForm.FormCreate(Sender: TObject);
begin
  map := TBitMap.Create;
  isModified := false;
  isPainiting := false;
end;

procedure TMainForm.mmExitClick(Sender: TObject);
begin
  ExitProcedure;
end;

procedure TMainForm.mmNewClick(Sender: TObject);
begin
  if newfile.NewMapForm.ShowModal = mrOk then
  begin
    pbmap.Left := 0;
    pbmap.Top := 0;
    map.Width := newfile.NewMapForm.seWidth.Value;
    map.Height := newfile.NewMapForm.seLength.Value;
    pbMap.Width := map.Width;
    pbMap.Height := map.Height;
    map.Canvas.Brush.Color := RGB(0, 0, 0);
    map.Canvas.Brush.Style := bsSolid;
    map.Canvas.Rectangle(-1, -1, map.Height + 2, map.Width + 2);
  end;
  pbMap.Invalidate;
end;

procedure TMainForm.mmOpenClick(Sender: TObject);
begin
  if odOpenMap.Execute then
  begin
    map.LoadFromFile(odOpenMap.FileName);
    pbMap.Width := map.Width;
    pbmap.Height := map.Height;
    pbMap.Left := 0;
    pbMap.Top := 0;
    isModified := false;
  end;
  pbMap.Invalidate;
end;

procedure TMainForm.mmSaveClick(Sender: TObject);
begin
  if sdSaveRawFile.Execute then
  begin
    map.SaveToFile(sdSaveRawFile.FileName);
    isModified := false;
  end;
end;

procedure TMainForm.Modify(X, Y:Integer);
var
  Radius: Integer;
  MaxR: Integer;
  Gradient: Integer;
  Hight: Integer;
  Power: Integer;
begin
  map.Canvas.Pen.Width := 3;
  map.Canvas.Brush.Style := bsClear;
  map.Canvas.Pen.Style := psSolid;
  MaxR := seRadius.Value;
  Gradient := seGradient.Value;
  Power := sePower.Value;
  Hight := GetRValue(map.Canvas.Pixels[X, Y]) + Power;
  for Radius := 0 to MaxR do
  begin
    if Hight < 0 then
    begin
      Hight := 0;
    end;
    if Hight > 255 then
    begin
      Hight := 255;
    end;
    map.Canvas.Pen.Color := rgb(Hight, Hight, Hight);
    map.Canvas.Ellipse(x - Radius, y - Radius, x + Radius, y + Radius);
    Dec(Hight, Gradient*Sign(Power));
  end;
  pbMap.Invalidate;
end;

procedure TMainForm.pbMapMouseDown(Sender: TObject; Button: TMouseButton;
  Shift: TShiftState; X, Y: Integer);
begin
  isPainiting := true;
  Modify(X, Y);
end;

procedure TMainForm.pbMapMouseMove(Sender: TObject; Shift: TShiftState; X,
  Y: Integer);
begin
  lblX.Caption := IntToStr(x);
  lblY.Caption := IntToStr(y);
  lblZ.Caption := IntToStr(GetRValue(map.Canvas.Pixels[X, Y]));        {
  if isPainiting then
  begin
    Modify(x, y);
  end;             }
end;

procedure TMainForm.pbMapMouseUp(Sender: TObject; Button: TMouseButton;
  Shift: TShiftState; X, Y: Integer);
begin
  isPainiting := false;
end;

procedure TMainForm.pbMapPaint(Sender: TObject);
begin
  pbMap.Canvas.Draw(0,0, map);
end;

end.
